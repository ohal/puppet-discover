# THIS FILE IS MANAGED BY PUPPET
#
# Package generated configuration file
# See the sshd_config(5) manpage for details

# What ports, IPs and protocols we listen for
Port <%= scope.lookupvar('ssh::ssh_port') %>
# Use these options to restrict which interfaces/protocols sshd will bind to
#ListenAddress ::
#ListenAddress 0.0.0.0
<% if scope.lookupvar('ssh::ssh_listen_address').empty? == false then -%>
<% scope.lookupvar('ssh::ssh_listen_address').each do |address| -%>
ListenAddress <%= address %>
<% end -%>
<% end -%>
Protocol <%= scope.lookupvar('ssh::ssh_protocol') %>
# HostKeys for protocol version 2
HostKey /etc/ssh/ssh_host_rsa_key
HostKey /etc/ssh/ssh_host_dsa_key
HostKey /etc/ssh/ssh_host_ecdsa_key
#Privilege Separation is turned on for security
UsePrivilegeSeparation <%= scope.lookupvar('ssh::ssh_privilege_separation') %>

# Lifetime and size of ephemeral version 1 server key
KeyRegenerationInterval 3600
ServerKeyBits 768

# Logging
SyslogFacility AUTH
LogLevel <%= scope.lookupvar('ssh::ssh_loglevel') %>

# Authentication:
LoginGraceTime <%= scope.lookupvar('ssh::ssh_logingracetime') %>
PermitRootLogin <%= scope.lookupvar('ssh::ssh_root_login') %>
StrictModes <%= scope.lookupvar('ssh::ssh_strictmodes') %>

# Allow users:
<% if scope.lookupvar('ssh::ssh_users').empty? == false then -%>
<% scope.lookupvar('ssh::ssh_users').each do |user| -%>
AllowUsers <%= user %>
<% end -%>
<% end -%>
RSAAuthentication <%= scope.lookupvar('ssh::ssh_rsa_authentication') %>
PubkeyAuthentication <%= scope.lookupvar('ssh::ssh_pubkey_authentication') %>
#AuthorizedKeysFile	%h/.ssh/authorized_keys

# Don't read the user's ~/.rhosts and ~/.shosts files
IgnoreRhosts <%= scope.lookupvar('ssh::ssh_ignore_rhosts') %>
# For this to work you will also need host keys in /etc/ssh_known_hosts
RhostsRSAAuthentication <%= scope.lookupvar('ssh::ssh_rhostsrsa_authentication') %>
# similar for protocol version 2
HostbasedAuthentication <%= scope.lookupvar('ssh::ssh_hostbased_authentication') %>
# Uncomment if you don't trust ~/.ssh/known_hosts for RhostsRSAAuthentication
IgnoreUserKnownHosts <%= scope.lookupvar('ssh::ssh_ignore_user_known_hosts') %>

# To enable empty passwords, change to yes (NOT RECOMMENDED)
PermitEmptyPasswords <%= scope.lookupvar('ssh::ssh_empty_password') %>

# Change to yes to enable challenge-response passwords (beware issues with
# some PAM modules and threads)
ChallengeResponseAuthentication <%= scope.lookupvar('ssh::ssh_challenge_response_authentication') %>

# Change to no to disable tunnelled clear text passwords
PasswordAuthentication <%= scope.lookupvar('ssh::ssh_password_authentication') %>

# Kerberos options
#KerberosAuthentication no
#KerberosGetAFSToken no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes

X11Forwarding yes
X11DisplayOffset 10
PrintMotd no
PrintLastLog yes
TCPKeepAlive yes
#UseLogin no

#MaxStartups 10:30:60
#Banner /etc/issue.net

# Allow client to pass locale environment variables
AcceptEnv LANG LC_*

Subsystem sftp /usr/lib/openssh/sftp-server

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
UsePAM yes
